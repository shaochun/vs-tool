<?xml version="1.0" encoding="utf-8"?>
<Rule Name="CL" PageTemplate="tool" DisplayName="Clang C/C++" SwitchPrefix="-" Order="10" xmlns="http://schemas.microsoft.com/build/2009/properties" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:sys="clr-namespace:System;assembly=mscorlib">
  <Rule.Categories>    
    <Category Name="General" DisplayName="General" />
    <Category Name="Optimization" DisplayName="Optimization" />
    <Category Name="Preprocessor" DisplayName="Preprocessor" />
    <Category Name="Code Generation" DisplayName="Code Generation" />
    <Category Name="Language" DisplayName="Language" />
    <Category Name="Output Files" DisplayName="Output Files" />
    <Category Name="Advanced" DisplayName="Advanced" />
    <Category Name="Command Line" DisplayName="Command Line" Subtype="CommandLine" />
  </Rule.Categories>
  <Rule.DataSource>
    <DataSource Persistence="ProjectFile" ItemType="ClCompile" Label="" HasConfigurationCondition="true" />
  </Rule.DataSource>

  <StringListProperty Subtype="folder" Name="AdditionalIncludeDirectories" DisplayName="Additional Include Directories (-I)" Description="Specify a semicolon(;)-separated list of directories that will be searched for files in #include statements. (-IC:\path\to\some\folder)" Category="General" Switch="I" />
  <EnumProperty Name="GenerateDebugInformation" DisplayName="Generate Debug Info (-g)" Description="Specifies whether to embed debugging information into the generated binary code." Category="General">
    <EnumValue Name="NoDebugInfo" DisplayName="Disabled" Description="Do not embed debugging information in the generated binaries." />
    <EnumValue Name="LimitedDebugInfo" DisplayName="Limited Debug Information" Description="Generate a limited version of debug information to reduce the size of the generated debug binary." Switch="g -flimit-debug-info" />
    <EnumValue Name="FullDebugInfo" DisplayName="Full Debug Information" Description="Generate a full debugging information." Switch="g" />
  </EnumProperty>

  <EnumProperty Name="Warnings" DisplayName="Warnings" Category="General">
    <EnumValue Name="DisableAllWarnings" DisplayName="Disable All Warnings" Description="Suppresses the output of all warning messages." Switch="w" />
    <EnumValue Name="NormalWarnings" DisplayName="Enable Normal Warnings" Description="Run clang with normal warning output level." />
    <EnumValue Name="AllWarnings" DisplayName="Enable All Warnings" Switch="Wall" Description="Display all possible warnings detected by clang. "/>
  </EnumProperty>
  <StringListProperty Subtype="folder" Name="EnableWarnings" DisplayName="Enable Specific Warnings (-W)" Description="Specify a semicolon(;)-separated list of warnings to be enabled." Category="General" Switch="W" />
  <StringListProperty Subtype="folder" Name="DisableWarnings" DisplayName="Disable Specific Warnings (-Wno-)" Description="Specify a semicolon(;)-separated list of warnings to be suppressed by clang." Category="General" Switch="Wno-" />
  <BoolProperty Name="WarningsAsErrors" DisplayName="Treat All Warnings as Errors (-Werror)" Description="Turns all warnings into errors." Category="General" Switch="Werror" />
  <StringListProperty Subtype="folder" Name="SpecificWarningsAsErrors" DisplayName="Treat Specific Warnings as Errors (-Werror=)" Description="Specify a semicolon(;)-separated list of warnings to be treated as errors. To force a warning to be not be treated as an error, specify -Wno-error=foo in Command Line -> Additional Options." Category="General" Switch="Werror=" />
<!--  <StringListProperty Subtype="folder" Name="WarningsNotAsErrors" DisplayName="Treat Specific Warnings as Non-Errors" Category="General" Switch="Wno-error=" /> -->
  <BoolProperty Name="EchoCommandLines" DisplayName="Echo Command Lines" Description="If true, the commands clang is invoked with are printed to stdout during compilation." Category="General" />

  <EnumProperty Name="LanguageStandardMode" DisplayName="Language Standard Mode" Description="Specifies the C/C++ language standard to follow. See http://clang.llvm.org/docs/UsersManual.html." Category="Language">
    <EnumValue Name="NoLanguageStandardSet" DisplayName="Not set (default to gnu99)" Description="Do not specify the -std command line option. clang will default to gnu99 mode." />
    <EnumValue Name="LanguageStandardC89" DisplayName="C90 (ISO C 1990)" Description=" In 1989, the C standard was ratified as ANSI X3.159-1989 'Programming Language C'. This version of the language is often referred to as ANSI C, Standard C, or sometimes C89." Switch="std=c90" />
    <EnumValue Name="LanguageStandardGnu89" DisplayName="Gnu90 (ISO C 1990 with GNU Extensions)" Description="See http://clang.llvm.org/docs/UsersManual.html" Switch="std=gnu90" />
    <EnumValue Name="LanguageStandardC94" DisplayName="C94 (ISO C 1990 with Amendment 1)" Description="c94 mode is identical to c89 mode except that digraphs are enabled in c94 mode (FIXME: And __STDC_VERSION__ should be defined!)." Switch="std=c94" />
    <EnumValue Name="LanguageStandardC99" DisplayName="C99 (ISO/IEC 9899:1999)" Description="After the ANSI/ISO standardization process, the C language specification remained relatively static for several years. In 1995 Normative Amendment 1 to the 1990 C standard was published, to correct some details and to add more extensive support for international character sets. The C standard was further revised in the late 1990s, leading to the publication of ISO/IEC 9899:1999 in 1999, which is commonly referred to as 'C99'." Switch="std=c99" />
    <EnumValue Name="LanguageStandardGnu99" DisplayName="Gnu99 (ISO C 1999 with GNU Extensions)" Description="See http://clang.llvm.org/docs/UsersManual.html" Switch="std=gnu99" />
    <EnumValue Name="LanguageStandardCxx03" DisplayName="C++03 (ISO C++ 1998 with Amendments)" Switch="std=cxx03" />
    <EnumValue Name="LanguageStandardGnu++98" DisplayName="Gnu++98 (ISO C++ 1998 with Amendments and GNU Extensions" Switch="std=gnucxx98" />
    <EnumValue Name="LanguageStandardC1X" DisplayName="C1X (ISO C 201X)" Switch="std=c1x" />
    <EnumValue Name="LanguageStandardC++11" DisplayName="C++11 (ISO C++ 2011 with Amendments)" Switch="std=cxx11" />
    <EnumValue Name="LanguageStandardGnu++11" DisplayName="Gnu++11 (ISO C++ 2011 with Amendments and GNU Extensions)" Switch="std=gnu++11" />
    <EnumValue Name="LanguageStandardOpenCL" DisplayName="OpenCL 1.0" Switch="opencl" />
    <EnumValue Name="LanguageStandardCUDA" DisplayName="nVidia CUDA" Switch="cuda" />
  </EnumProperty>
  
  <EnumProperty Name="LanguageExtensions" DisplayName="clang Language Extensions" Description="Specifies how to treat clang -specific C/C++ language extensions." Category="Language">
    <EnumValue Name="EnableLanguageExtensions" DisplayName="Enabled" Description="Enables compilation of C/C++ code with clang -specific extensions." />
    <EnumValue Name="WarnLanguageExtensions" DisplayName="Enabled with Warnings" Description="Enables compilation of C/C++ code with clang -specific extensions, but produces warning messages whenever these extensions are used." Switch="pedantic" />
    <EnumValue Name="ErrorLanguageExtensions" DisplayName="Disabled" Description="Do not allow clang -specific C/C++ language extensions. " Switch="pedantic-errors" />
  </EnumProperty>

  <BoolProperty Name="EnableMicrosoftExtensions" DisplayName="Enable Microsoft Extensions (-fms-extensions)" Description="Enable support for extensions from Microsoft Visual C++." Category="Language" Switch="fms-extensions" />

  <EnumProperty Name="SpecifyMscVer" DisplayName="Set _MSC_VER" Description="Mimic Visual C++ compiler by setting the predefined _MSC_VER variable. This option will be removed when clang supports the full set of MS extensions required for Windows headers. See http://sourceforge.net/apps/mediawiki/predef/index.php?title=Compilers#Microsoft_Visual_C.2B.2B" Category="Language">
    <EnumValue Name="NoMscVer" DisplayName="Not set" Description="Do not specify -fmsc-version. However, this does not prohibit some other piece of code from #defining _MSC_VER." />
    <EnumValue Name="VisualC6" DisplayName="Visual C++ 6.0 SP6" Description="Preset _MSC_VER=1200." Switch="fmsc-version=1200" />
    <EnumValue Name="VisualC7" DisplayName="Visual C++ 7.0" Description="Preset _MSC_VER=1300." Switch="fmsc-version=1300" />
    <EnumValue Name="VisualC71" DisplayName="Visual C++ 7.1 (2003)" Description="Preset _MSC_VER=1310." Switch="fmsc-version=1310" />
    <EnumValue Name="VisualC80" DisplayName="Visual C++ 8.0 (2005)" Description="Preset _MSC_VER=1400." Switch="fmsc-version=1400" />
    <EnumValue Name="VisualC90" DisplayName="Visual C++ 9.0 (2008)" Description="Preset _MSC_VER=1500." Switch="fmsc-version=1500" />
    <EnumValue Name="VisualC100" DisplayName="Visual C++ 10.0 (2010)" Description="Preset _MSC_VER=1600." Switch="fmsc-version=1600" />
    <EnumValue Name="VisualC110" DisplayName="Visual C++ 11.0 (2011)" Description="Preset _MSC_VER=1700." Switch="fmsc-version=1700" />
  </EnumProperty>
<!-- Odd: Clang documents these, but doesn't use them and gives warning if they are specified.
  <IntProperty Name="ConstExprLimit" DisplayName="Recursive constexpr Invocation Limit" Description="Sets the limit for recursive constexpr function invocations to N. If this field is left empty, the default value of 512 is used." Category="Language" Switch="fconstexpr-depth=" />
  <IntProperty Name="TemplateRecursionLimit" DisplayName="Recursive Template Instantiation Limit" Description="Sets the limit for recursively nested template instantiations to N. If this field is left empty, the default value of 1024 is used." Category="Language" Switch="ftemplate-depth=" />
-->
  <BoolProperty Name="WarnSystemHeaders" DisplayName="System Header Warnings (-Wsystem-headers)" Description="If false, compiler warnings occurring in system (platform) headers are not shown. If true, compiler warnings in system headers are reported. System headers are the paths which are included with the -isystem command line option." Category="General" Switch="Wsystem-headers" />

<!-- Odd: Clang documents this, but doesn't use them and gives warning if they are specified.
<IntProperty Name="ErrorLimit" DisplayName="Compilation Error Limit (-ferror-limit)" Description="Halt compilation after the given number of errors have been produced. To disable the error limit, specify 0 for this parameter. If this line is left empty, the clang default value of 20 is used." Category="General" Switch="ferror-limit" /> -->

<!--  <IntProperty Name="TemplateBacktraceLimit" DisplayName="" Description="" Category="General" Switch="ftemplate-backtrace-limit" /> -->

  <EnumProperty Name="OptimizationLevel" DisplayName="Optimization" Category="Optimization">
    <EnumValue Name="OptimizationNotSet" DisplayName="Not set" />
    <EnumValue Name="Os" DisplayName="Optimize for Size" Description="Optimize code to produce the smallest possible binary." Switch="Os" />
    <EnumValue Name="Oz" DisplayName="Force Optimize for Size" Description="Forcibly optimize code to produce the smallest possible binary, regardless of whether it greatly impacts performance." Switch="Oz" />
    <EnumValue Name="O0" DisplayName="Disable Optimizations" Description="Do not optimize the code at all. Produces binaries which are easily debuggable. Be sure to specify the flag -g as well to generate debug information." Switch="O0" />
    <EnumValue Name="O1" DisplayName="Optimization Flag -O1" Switch="O1" />
    <EnumValue Name="O2" DisplayName="Optimization Flag -O2" Switch="O2" />
    <EnumValue Name="O3" DisplayName="Optimization Flag -O3" Switch="O3" />
    <EnumValue Name="O4" DisplayName="Optimization Flag -O4" Switch="O4" />
  </EnumProperty>
    
  <StringListProperty Name="PreprocessorDefinitions" DisplayName="Preprocessor Definitions (-D)" Description="Specify a semicolon(;)-separated list of C preprocessor #defines to be enabled for the compilation. To set a value for the given preprocessor setting, use the syntax MYDEFINE=myvalue;" Category="Preprocessor" Switch="D" />
  <StringListProperty Name="PreprocessorUndefinitions" DisplayName="Preprocessor Undefinitions (-U)" Description="Forces a set of given preprocessor settings to be #undefined for the whole build. Use the semicolon(;) symbol to separate several entries." Category="Preprocessor" Switch="U" />

  <EnumProperty Name="PreprocessToFile" DisplayName="Preprocess to a File" Description="Preprocesses C and C++ source files and writes the preprocessed output to a file. This option suppresses compilation, thus it does not produce an object file." Category="Preprocessor">
    <EnumValue Name="NoPreprocess" DisplayName="Disabled" Description="Perform a standard compilation pass." />
    <EnumValue Name="PreprocessWithoutCommentsOrLines" DisplayName=".i file" Description="Disable standard compilation, and instead output preprocessed source file with the file suffix .i, with code comments stripped." Switch="E -P" />
    <EnumValue Name="PreprocessWithoutComments" DisplayName=".i file with line markers" Description="Disable standard compilation, and instead output preprocessed source file with the file suffix .i, with code comments stripped. Show line number markers of form '#line x' in the output file." Switch="E" />
    <EnumValue Name="PreprocessWithCommentsNoLines" DisplayName=".i file with comments" Description="Disable standard compilation, and instead output preprocessed source file with the file suffix .i. Leave code comments intact." Switch="E -C -P" />
    <EnumValue Name="PreprocessWithComments" DisplayName=".i file with comments and line markers" Description="Disable standard compilation, and instead output preprocessed source file with the file suffix .i. Leave code comments intact. Show line number markers of form '#line x' in the output file." Switch="E -C" />
    <EnumValue Name="PreprocessWithCommentsInMacrosNoLines" DisplayName=".i file with all comments" Description="Disable standard compilation, and instead output preprocessed source file with the file suffix .i. Preserve all code comments, even in macro expansions." Switch="E -CC -P" />
    <EnumValue Name="PreprocessWithCommentsInMacros" DisplayName=".i file with all comments and line markers" Description="Disable standard compilation, and instead output preprocessed source file with the file suffix .i. Preserve all code comments, even in macro expansions. Show line number markers of form '#line x' in the output file." Switch="E -CC" />
  </EnumProperty>

  <BoolProperty Name="CatchUndefinedBehavior" DisplayName="Catch Undefined Behavior" Description="Turn on runtime code generation to check for undefined behavior, e.g. out-of-bound accesses to arrays and undefined shift operators. If a check fails, __builtin_trap() is used to indicate failure." Category="Code Generation" Switch="fcatch-undefined-behavior"  />
  <!-- Odd: Clang documents this, but doesn't use them and gives warning if they are specified.
  <BoolProperty Name="UseAddressSanitizer" DisplayName="Turn on AddressSanitizer" Description="Enables the use of AddressSanitizer, a fast memory error detector. It consists of a compiler instrumentation module and a run-time library. See http://clang.llvm.org/docs/AddressSanitizer.html" Category="Code Generation" Switch="faddress-sanitizer"  /> -->
  
  <BoolProperty Name="UseThreadSanitizer" DisplayName="Turn on ThreadSanitizer" Description="Enables the use of ThreadSanitizer, an experimental data race detector. Not ready for widespread use. See http://code.google.com/p/data-race-test/wiki/CompileTimeInstrumentation" Category="Code Generation" Switch="fthread-sanitizer"  />
  <BoolProperty Name="NotSaneOperatorNew" DisplayName="Don't Assume Sane Operator new" Description="This option tells the compiler to do not assume that C++'s global new operator will always return a pointer that does not alias any other pointer when the function returns." Category="Code Generation" Switch="fno-assume-sane-operator-new"  />

  <BoolProperty Name="GenerateLLVMByteCode" DisplayName="Generate LLVM Bytecode" Description="If set, the resulting object file contains LLVM bytecode. If not set, the generated object file will contain assembly for the target platform." Category="Code Generation" Switch="emit-llvm"  />

  <EnumProperty Name="TargetArchitecture" DisplayName="Target Architecture" Description="Specifies the target architecture to compile code for." Category="Code Generation">
    <EnumValue Name="NotSet" DisplayName="Not set" />
    <EnumValue Name="x86" DisplayName="x86" Switch="m32" />
    <EnumValue Name="x64" DisplayName="x64 or amd64" Switch="m64" />
  </EnumProperty>

  <EnumProperty Name="InstructionSet" DisplayName="Enable Enhanced Instruction Set" Description="Enable use of instructions found on processors that support enhanced instruction sets." Category="Code Generation">
    <EnumValue Name="NotSet" DisplayName="Not set" />
    <EnumValue Name="MMX" DisplayName="Multimedia Extensions (MMX)" Switch="mmmx" />
    <EnumValue Name="SSE1" DisplayName="Streaming SIMD Extensions (SSE)" Switch="msse" />
    <EnumValue Name="SSE2" DisplayName="Streaming SIMD Extensions 2 (SSE2)" Switch="msse2" />
    <EnumValue Name="SSE3" DisplayName="Streaming SIMD Extensions 3 (SSE3)" Switch="msse3" />
    <EnumValue Name="SSSE3" DisplayName="Supplemental Streaming SIMD Extensions 3 (SSSE3)" Switch="mssse3" />
    <EnumValue Name="SSE4" DisplayName="Streaming SIMD Extensions 4 (SSE4)" Switch="msse4" />
    <EnumValue Name="SSE4.1" DisplayName="Streaming SIMD Extensions 4.1 (SSE4.1)" Switch="msse41" />
    <EnumValue Name="SSE4.2" DisplayName="Streaming SIMD Extensions 4.2 (SSE4.2)" Switch="msse42" />
    <EnumValue Name="AVX" DisplayName="Advanced Vector Extensions (AVX)" Switch="mavx" />
    <EnumValue Name="AVX2" DisplayName="Advanced Vector Extensions 2 (AVX2)" Switch="mavx2" />
  </EnumProperty>

  <StringProperty Subtype="file" Name="ObjectFileName" DisplayName="Object File Name" Category="Output Files" Switch="o " />
  <BoolProperty Name="PreserveTempFiles" DisplayName="Preserve All Intermediate Files" Description="If set, the intermediate compilation results are stored to files. Look for files with suffixes .ii, .s and .o." Category="Output Files" Switch="save-temps" />
  <EnumProperty Name="VerboseOutput" DisplayName="Verbose Compilation" Description="Specify what kind of debug trace output to generate during compilation." Category="Output Files">
    <EnumValue Name="NoVerboseOutput" DisplayName="Disabled" />
    <EnumValue Name="PrintCommands" DisplayName="Only Print Executed Commands, Don't Compile" Switch="###" />
    <EnumValue Name="VerboseOutputMode" DisplayName="Verbose Compilation" Switch="v" />
  </EnumProperty>

  <BoolProperty Name="OutputHeaderIncludeChain" DisplayName="Print Header Include Chains (-H)" Description="If enabled, prints the file header include chains to stdout while compiling." Category="Output Files" Switch="H" />
  <BoolProperty Name="GenerateAST" DisplayName="Generate Abstract Syntax Tree (AST) File (-emit-ast)" Description="Emit Clang AST files for source inputs" Category="Output Files" Switch="emit-ast" />
  <BoolProperty Name="AssemblerOutput" DisplayName="Generate Assembler Output (-S)" Description="If enabled, does not output machine code, but a human-readable assembly of the generated code. TODO: GENERATE .s file instead." Category="Output Files" Switch="S" />
  <BoolProperty Name="RunStaticAnalysis" DisplayName="Run Static Analysis Tool (-analyze)" Description="If enabled, runs clang static analyzer for the source file(s) and outputs it to a .plist file." Category="Output Files" Switch="-analyze" />

<!--  <StringListProperty Subtype="folder" Name="SystemIncludeDirectories" Category="General" Visible="false" Switch="Xclang -isystem" />
  <StringListProperty Name="SystemPreprocessorDefinitions" Visible="false" Category="Preprocessor" DisplayName="System Preprocessor Definitions (-D)" Switch="D" />
  <StringListProperty Name="SystemPreprocessorUndefinitions" Visible="false" Category="Preprocessor" DisplayName="System Preprocessor Undefinitions (-U)" Switch="U" /> -->
  <StringProperty Name="ClangCompileFlags" DisplayName="Clang Required Compilation Flags" Description="Necessary compilation flags to generate appropriate clang output for MS linker." Visible="false" Category="Command Line" />
<!--  <StringProperty Name="EmscriptenCompileFlags" DisplayName="Emscripten Required Compilation Flags" Description="Necessary compilation flags to generate appropriate clang output for emcc linker." Visible="false" Category="Command Line" /> -->

  <BoolProperty Name="GenerateDependencyFile" Switch="MD" Visible="true" Category="Advanced" />
  <StringProperty Name="DependencyFileName" Switch="MF " Visible="true" Category="Advanced" />

  <StringProperty Name="AdditionalOptions" DisplayName="Additional Options" Description="Additional Options" Category="Command Line" />
    
</Rule>
